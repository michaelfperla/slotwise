name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.23'

jobs:
  # Lint and format checks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          npm ci

      - name: Lint TypeScript
        run: |
          npm run lint

      - name: Format check
        run: |
          npm run format
          git diff --exit-code

      - name: Go lint
        run: |
          cd services/auth-service && go vet ./...
          cd ../scheduling-service && go vet ./...

  # TypeScript type checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Build and type check
        run: |
          npm run build

  # Unit tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          npm ci

      - name: Run tests
        run: |
          npm run test:all

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotwise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10
        ports:
          - 4222:4222

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          npm ci

      - name: Setup test databases
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_auth_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_business_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_scheduling_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_notification_test;"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotwise_business_test
        run: |
          cd services/business-service && npx prisma migrate deploy

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotwise_business_test
          REDIS_URL: redis://localhost:6379
          NATS_URL: nats://localhost:4222
        run: |
          cd services/business-service && npm run test:integration
          cd ../notification-service && npm run test:integration

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build auth service
        uses: docker/build-push-action@v6
        with:
          context: ./services/auth-service
          file: ./services/auth-service/Dockerfile
          push: false
          tags: slotwise-auth-service:latest

      - name: Build business service
        uses: docker/build-push-action@v6
        with:
          context: ./services/business-service
          file: ./services/business-service/Dockerfile
          push: false
          tags: slotwise-business-service:latest

      - name: Build scheduling service
        uses: docker/build-push-action@v6
        with:
          context: ./services/scheduling-service
          file: ./services/scheduling-service/Dockerfile
          push: false
          tags: slotwise-scheduling-service:latest

      - name: Build notification service
        uses: docker/build-push-action@v6
        with:
          context: ./services/notification-service
          file: ./services/notification-service/Dockerfile
          push: false
          tags: slotwise-notification-service:latest

      - name: Build frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: slotwise-frontend:latest
