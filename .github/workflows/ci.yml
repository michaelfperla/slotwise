name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.23'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      nx-base: ${{ steps.set-shas.outputs.base }}
      nx-head: ${{ steps.set-shas.outputs.head }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: set-shas
        uses: nrwl/nx-set-shas@v4

  # Lint and format checks using Nx
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Lint affected projects
        run: |
          npx nx affected -t lint --base=${{ needs.setup.outputs.nx-base }} --head=${{ needs.setup.outputs.nx-head }}

      - name: Format check
        run: |
          echo "Checking code formatting..."
          npm run format
          if ! git diff --exit-code; then
            echo "❌ Code formatting issues detected!"
            echo "The following files need formatting:"
            git diff --name-only
            echo ""
            echo "To fix this locally, run:"
            echo "  npm run format"
            echo "  git add ."
            echo "  git commit -m 'fix: apply code formatting'"
            exit 1
          else
            echo "✅ All files are properly formatted"
          fi

      - name: Go lint
        run: |
          cd services/auth-service && go vet ./...
          cd ../scheduling-service && go vet ./...

  # Build and type checking using Nx
  build:
    name: Build and Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: |
          echo "Running TypeScript type checking..."
          npx nx affected -t typecheck --base=${{ needs.setup.outputs.nx-base }} --head=${{ needs.setup.outputs.nx-head }}

      - name: Build affected projects
        run: |
          echo "Building affected projects..."
          npx nx affected -t build --base=${{ needs.setup.outputs.nx-base }} --head=${{ needs.setup.outputs.nx-head }}

  # Unit tests using Nx
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run affected tests
        run: |
          npx nx affected -t test --base=${{ needs.setup.outputs.nx-base }} --head=${{ needs.setup.outputs.nx-head }} --passWithNoTests

      - name: Run Go tests
        run: |
          cd services/auth-service && go test ./...
          cd ../scheduling-service && go test ./...

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotwise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10
        ports:
          - 4222:4222

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Setup test databases
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_auth_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_business_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_scheduling_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE slotwise_notification_test;"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotwise_business_test
        run: |
          cd services/business-service && npx prisma migrate deploy

      - name: Run affected integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotwise_business_test
          REDIS_URL: redis://localhost:6379
          NATS_URL: nats://localhost:4222
        run: |
          npx nx affected -t test:integration --base=${{ needs.setup.outputs.nx-base }} --head=${{ needs.setup.outputs.nx-head }} --passWithNoTests

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level high || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build auth service
        uses: docker/build-push-action@v6
        with:
          context: ./services/auth-service
          file: ./services/auth-service/Dockerfile
          push: false
          tags: slotwise-auth-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build business service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./services/business-service/Dockerfile
          push: false
          tags: slotwise-business-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build scheduling service
        uses: docker/build-push-action@v6
        with:
          context: ./services/scheduling-service
          file: ./services/scheduling-service/Dockerfile
          push: false
          tags: slotwise-scheduling-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build notification service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./services/notification-service/Dockerfile
          push: false
          tags: slotwise-notification-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: slotwise-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
